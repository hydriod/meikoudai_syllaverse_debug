name: Update StreamingAssets

on:
  workflow_dispatch:
  schedule:
      # 4月1日00:00(UTC)に実行
    - cron: "0 0 15 3 *"

env:
  driveFileId: 1-7RpPdsAdUNTPmB6FuMvIj3nDkVseSrx
  phpFolder: Temp/artifact
  modelFolder: Temp/model
  unityProjectPath: meikoudai_syllaverse
  buildFolder: meikoudai_syllaverse/build

jobs:
  scraping-syllabus:
    runs-on: ubuntu-latest
    steps:
        # チェックアウト
      - uses: actions/checkout@v3

        # Python環境の構築
      - name: setup python
        uses: actions/setup-python@v4
        with: 
          python-version: "3.9"
      - name: Install lib
        run: pip install -r requirements.txt

        # シラバスのダウンロード
      - name: download
        run: python syllabus_analysis/download.py

        # 圧縮
      - name: Compress
        run: |
          mkdir -p ${{ env.unityProjectPath }}/Assets/StreamingAssets/download/
          tar -cvf download_syllabus.tar -C ${{ env.unityProjectPath }}/Assets/StreamingAssets/download/ .
          xz -zev9T0 --memlimit=6800MiB download_syllabus.tar

        # ドライブにアップロード
      - name: Upload Drive
        run: |
          # アクセストークン取得
          AUTH_JSON=$(curl -X POST "https://oauth2.googleapis.com/token" \
          -d "client_id=${{ secrets.CLIENT_ID }}" \
          -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
          -d "refresh_token=${{ secrets.REFRESH_TOKEN }}" \
          -d "grant_type=refresh_token")
          TOKEN=$(echo ${AUTH_JSON} | jq .access_token)

          # アップロード
          curl -X PATCH \
          "https://www.googleapis.com/upload/drive/v3/files/${{ env.driveFileId }}?uploadType=multipart" \
          -H "Authorization: Bearer ${TOKEN}" \
          -F 'metadata={"name": "download_syllabus.tar.xz"};type=application/json' \
          -F "file=@download_syllabus.tar.xz"

        # アーティファクトのアップロード
      - uses: actions/upload-artifact@v3
        with:
          name: download_syllabus.tar.xz
          path: download_syllabus.tar.xz


  generate-xml:
    needs: scraping-syllabus
    runs-on: ubuntu-latest
    steps:
      # 自リポジトリのチェックアウト
      - name: checkout this repository
        uses: actions/checkout@v3

      # ダウンロード
      - run: mkdir -p ${{ env.phpFolder }}
      - uses: actions/download-artifact@v3
        with:
          name: download_syllabus.tar.xz
          path: ${{ env.phpFolder }}/

      # 展開
      - name: Extract
        run: tar -Jxvf download_syllabus.tar.xz
        working-directory: ${{ env.phpFolder }}

      # 環境構築
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      # XMLファイルの出力
      - name: run
        run: |
          dotnet build ./syllabus_analysis/PhpToXml/PhpToXml.csproj 
          dotnet ./syllabus_analysis/PhpToXml/bin/Debug/net6.0/PhpToXml.dll ./${{ env.phpFolder }} ${{ env.unityProjectPath }}/Assets/StreamingAssets/xml

        # アーティファクトのアップロード
      - uses: actions/upload-artifact@v3
        with:
          name: xml
          path: ${{ env.unityProjectPath }}/Assets/StreamingAssets/xml

          
  doc2vec:
    needs: scraping-syllabus
    runs-on: ubuntu-latest
    steps:
      # 自リポジトリのチェックアウト
      - name: checkout this repository
        uses: actions/checkout@v3

      # PHPファイルのダウンロード
      - run: mkdir -p ${{ env.phpFolder }}
      - uses: actions/download-artifact@v3
        with:
          name: download_syllabus.tar.xz
          path: ${{ env.phpFolder }}
      # 展開
      - name: Extract
        run: tar -Jxvf download_syllabus.tar.xz
        working-directory: ${{ env.phpFolder }}

      # 環境構築
      - name: Setup Python
        uses: actions/setup-python@v4
        with: 
          python-version: "3.9"
      - name: Install lib
        run: pip install -r requirements.txt

      # CSVファイルの出力
      # モデルのダウンロード
      - name: model download
        run: |
          sudo apt install aria2
          mkdir -p ${{ env.modelFolder }}
          aria2c -x5 -o ${{ env.modelFolder }}/jawiki.doc2vec.dmpv300d.tar.bz2 https://www.dropbox.com/s/raw/njez3f1pjv9i9xj/jawiki.doc2vec.dmpv300d.tar.bz2
          bzip2 -d ${{ env.modelFolder }}/jawiki.doc2vec.dmpv300d.tar.bz2
          tar -xvf ${{ env.modelFolder }}/jawiki.doc2vec.dmpv300d.tar -C ${{ env.modelFolder }}
      # Pythonスクリプト実行
      - name: run
        run: |
          mkdir -p ${{ env.unityProjectPath }}/Assets/StreamingAssets/csv
          python syllabus_analysis/doc2vec.py ${{ env.modelFolder }}/jawiki.doc2vec.dmpv300d.model ${{ env.phpFolder }} ${{ env.unityProjectPath }}/Assets/StreamingAssets/csv/feature.csv

        # アーティファクトのアップロード
      - uses: actions/upload-artifact@v3
        with:
          name: csv
          path: ${{ env.unityProjectPath }}/Assets/StreamingAssets/csv


  commit-push:
    needs: [generate-xml, doc2vec]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 既存のものを削除
      - name: delete
        run: |
          rm -r ${{ env.unityProjectPath }}/Assets/StreamingAssets/xml
          rm -r ${{ env.unityProjectPath }}/Assets/StreamingAssets/csv

        # アーティファクトのダウンロード
      - uses: actions/download-artifact@v3
        with:
          name: xml
          path: ${{ env.unityProjectPath }}/Assets/StreamingAssets
      - uses: actions/download-artifact@v3
        with:
          name: csv
          path: ${{ env.unityProjectPath }}/Assets/StreamingAssets

      # push ###############
      - name: git config
        run: |
          git config --global user.name GitHub Action
          git config --global user.email action@github.com
      - name: push
        run: |
          git add .
          git commit -m "github actions"
          git push origin ${{ github.ref_name }}
      ##########################


  build:
    name: Run the WebGL build
    needs: commit-push
    runs-on: ubuntu-latest
    steps:
      # actions/checkout@v2 を利用して作業ディレクトリに
      # Unity プロジェクトの中身をダウンロードしてくる
      - name: Check out my unity project.
        uses: actions/checkout@v3

      # GameCI の Builder を利用して、
      # Unity プロジェクトのビルドを実行する
      - name: Run the WebGL build
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          # 今回は WebGL ビルドを行いたいため WebGL を指定する
          targetPlatform: WebGL
          unityVersion: ${{ vars.UNITY_VERSION }}
          unityProjectPath: ${{ env.unityProjectPath }}
          buildsPath: ${{ env.buildFolder }}

      # Builder で出力した WebGL ビルドを GitHub Pages にデプロイする
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          # GitHub Pages デプロイ用の Orphan ブランチ名を指定する
          branch: ${{ vars.DEPLOY_BRANCH }}
          # デプロイ用ビルドフォルダパスを指定する
          # GameCI の Builder はデフォルトでは build フォルダにビルド内容を出力する
          folder: ${{ env.buildFolder }}

      # Builder で出力した WebGL ビルドをアーティファクトでダウンロード可能にする
      - name: Upload the WebGL Build
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: ${{ env.buildFolder }}
    
